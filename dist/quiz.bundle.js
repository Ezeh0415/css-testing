/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/quiz.js":
/*!*********************!*\
  !*** ./src/quiz.js ***!
  \*********************/
/***/ (() => {

eval("const navOpen = document.querySelector(\".navOpen\");\r\nconst navClose = document.querySelector(\".navClose\");\r\nconst navBar = document.querySelector(\".navBar ul\");\r\nlet firstP = document.querySelector(\".first p\")\r\nlet h25 = document.querySelector(\".h25\"); \r\nlet h26 = document.querySelector(\".h26\"); \r\nlet h27 = document.querySelector(\".h27\"); \r\nlet h28 = document.querySelector(\".h28\"); \r\nlet img1 = document.querySelector(\".img1\");\r\nlet img2 = document.querySelector(\".img2\");\r\nlet img3 = document.querySelector(\".img3\");\r\nlet img4 = document.querySelector(\".img4\");\r\nlet img5 = document.querySelector(\".img5\");\r\nlet img6 = document.querySelector(\".img6\");\r\nlet img7 = document.querySelector(\".img7\");\r\nlet img8 = document.querySelector(\".img8\");\r\nlet img9 = document.querySelector(\".img9\");\r\nlet thirdP = document.querySelector(\".third p\");\r\nlet footerP1 = document.querySelector(\"footer .p1\");\r\nlet footerP2 = document.querySelector(\"footer .p2\");\r\nlet footerP3 = document.querySelector(\"footer .p3\");\r\nlet footerP4 = document.querySelector(\"footer .p4\");\r\nlet footerP5 = document.querySelector(\"footer .p5\");\r\nlet footerP6 = document.querySelector(\"footer .p6\");\r\nlet homeMain = document.querySelector(\".home-main\")\r\n// let loader = document.querySelector(\".loader\")\r\nlet newsCount = 0;\r\nlet newsCount1 = 2;\r\nlet newsCount2 = 3;\r\nlet newsCount3 = 4;\r\n\r\nnavClose.style.display = \"none\";\r\n\r\n// window.onload = function () {\r\n//   let API_KEY = \"6065a270b19a4c6c8b3bc836f66a7a67\";\r\n//   // let url = `https://newsapi.org/v2/everything?q=keyword&apiKey=${API_KEY}`;\r\n\r\n//   // Define a function to fetch data\r\n// async function fetchData(url) {\r\n//   try {\r\n//     // Before fetching, set loading state\r\n//     console.log('Loading...');\r\n    \r\n//     const response = await fetch(url);\r\n\r\n//     // Check if response is successful (status 200)\r\n//     if (!response.ok) {\r\n//       // If response is not successful, throw an error\r\n//       throw new Error('Network response was not ok');\r\n//     }\r\n\r\n//     // Parse response as JSON\r\n//     const data = await response.json();\r\n\r\n//     // After successful fetching, log data\r\n//     console.log('Data fetched:', data);\r\n    \r\n//     // Return the fetched data\r\n//     return data;\r\n//   } catch (error) {\r\n//     // If any error occurs during fetching, log the error\r\n//     console.error('Fetch error:', error.message);\r\n    \r\n//     // Return null or any other appropriate value to indicate error state\r\n//     return null;\r\n//   } finally {\r\n//     // Finally block will always execute, regardless of success or failure\r\n//     console.log('Fetch completed.');\r\n//   }\r\n// }\r\n\r\n// // Example usage\r\n// const apiUrl =  `https://newsapi.org/v2/everything?q=keyword&apiKey=${API_KEY}`;\r\n\r\n// fetchData(apiUrl)\r\n//   .then(data => {\r\n//     if (data !== null) {\r\n//       // Process the fetched data\r\n//     } else {\r\n//       // Handle error state\r\n//     }\r\n//   });\r\n\r\n//   // async function loadMovies() {\r\n//   //   const response = await fetch(url);\r\n//   //   const movies = await response.json();\r\n//   //   const {status,totalResults,articles} = movies\r\n//   //   console.log(articles);\r\n\r\n//   //   // auth bg image\r\n//   //  let = backgroundImages =' url(`${articles[newsCount].urlToImage}`)';\r\n//   //  let bgImage = document.querySelector(\"#bImage\");\r\n//   //  bgImage.style.backgroundImage = backgroundImages;(params) \r\n\r\n//   // }\r\n//   // loadMovies()\r\n// }\r\n\r\n\r\nwindow.addEventListener('load', function() {\r\n    let API_KEY = \"6065a270b19a4c6c8b3bc836f66a7a67\";\r\n    // let url = `https://newsapi.org/v2/everything?q=keyword&apiKey=${API_KEY}`;\r\n    // let url2 = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${API_KEY}`;\r\n    // let url3 = `https://newsapi.org/v2/top-headlines/sources?apiKey=${API_KEY}`;\r\n\r\n    async function fetchData(url) {\r\n      try {\r\n        // Before fetching, set loading state\r\n        console.log('Loading...');\r\n        \r\n        const response = await fetch(url);\r\n    \r\n        // Check if response is successful (status 200)\r\n        if (!response.ok) {\r\n          // If response is not successful, throw an error\r\n          throw new Error('Network response was not ok');\r\n        }\r\n    \r\n        // Parse response as JSON\r\n        const data = await response.json();\r\n        \r\n        // After successful fetching, log data\r\n        console.log('Data fetched:', data);\r\n        // Return the fetched data\r\n        return data;\r\n      } catch (error) {\r\n        // If any error occurs during fetching, log the error\r\n        console.error('Fetch error:', error.message);\r\n        \r\n        // Return null or any other appropriate value to indicate error state\r\n        return null;\r\n      } finally {\r\n        // Finally block will always execute, regardless of success or failure\r\n        console.log('Fetch completed.');\r\n      }\r\n    }\r\n    \r\n    // Example usage\r\n    const apiUrl = `https://newsapi.org/v2/everything?q=keyword&apiKey=${API_KEY}`;\r\n    \r\n    fetchData(apiUrl)\r\n      .then(data => {\r\n        if (data !== null) {\r\n          const {status,totalResults,articles} = data\r\n                 // adding img slider\r\n        let threeArticle = articles.slice(0,5);\r\n        img1.src = `${threeArticle[0].urlToImage}`\r\n        img2.src = `${threeArticle[4].urlToImage}`\r\n        img3.src = `${threeArticle[3].urlToImage}`\r\n        \r\n        console.log(threeArticle[0].author);\r\n\r\n        // auth bg image\r\n          \r\n\r\n       let newsCountInterval =  setInterval(() => {\r\n            if (newsCount < articles.length) {\r\n                newsCount += 1;\r\n                img4.src = `${articles[newsCount].urlToImage}`\r\n                img4.alt = `${articles[newsCount].author}`\r\n                firstP.textContent = `${articles[newsCount].description}`\r\n                img5.src = `${articles[newsCount].urlToImage}`\r\n                img5.alt = `${articles[newsCount].author}`\r\n                h25.textContent = `${articles[newsCount].title}`\r\n            } else {\r\n                clearInterval(newsCountInterval)\r\n            }\r\n\r\n        }, 10500);\r\n\r\n       let newsCount1Interval = setInterval(() => {\r\n\r\n             if (newsCount1 < articles.length) {\r\n                newsCount1 += 1;\r\n                img6.src = `${articles[newsCount1].urlToImage}`\r\n                img6.alt = `${articles[newsCount1].author}`\r\n                h26.textContent = `${articles[newsCount1].title}`\r\n            } else {\r\n              clearInterval(newsCount1Interval)\r\n            }\r\n\r\n        }, 10500);\r\n\r\n       let newsCount2Interval = setInterval(() => {\r\n\r\n            if (newsCount2 < articles.length) {\r\n                newsCount2 += 1;\r\n                img7.src = `${articles[newsCount2].urlToImage}`\r\n                img7.alt = `${articles[newsCount2].author}`\r\n                h27.textContent = `${articles[newsCount2].title}`\r\n            } else {\r\n              clearInterval(newsCount2Interval)\r\n            }\r\n\r\n        }, 10500);\r\n\r\n       let newsCount3Interval = setInterval(() => {\r\n            \r\n            if (newsCount3 < articles.length) {\r\n                newsCount3 += 1;\r\n                img8.src = `${articles[newsCount3].urlToImage}`\r\n                img8.alt = `${articles[newsCount3].author}`\r\n                h28.textContent = `${articles[newsCount3].title}`\r\n            } else {\r\n              clearInterval(newsCount3Interval)\r\n            }\r\n\r\n        }, 10500);\r\n\r\n        } else {\r\n          // Handle error state\r\n        }\r\n      });\r\n    \r\n      // async function loadMovies() {\r\n      //   const response = await fetch(url);\r\n      //   const movies = await response.json();\r\n      //   const {status,totalResults,articles} = movies\r\n      //   console.log(articles);\r\n\r\n        \r\n\r\n      //   // adding img slider\r\n      //   let threeArticle = articles.slice(0,5);\r\n      //   img1.src = `${threeArticle[0].urlToImage}`\r\n      //   img2.src = `${threeArticle[4].urlToImage}`\r\n      //   img3.src = `${threeArticle[3].urlToImage}`\r\n        \r\n      //   console.log(threeArticle[0].author);\r\n\r\n      //   // auth bg image\r\n      //      let = backgroundImages = `${articles[newsCount].urlToImage}`;\r\n      //      let bgImage = document.querySelector(\"#bImage\");\r\n      //      bgImage.style.backgroundImage = backgroundImages;\r\n\r\n      //  let newsCountInterval =  setInterval(() => {\r\n      //       if (newsCount <= articles.length) {\r\n      //           newsCount += 1;\r\n      //           img4.src = `${articles[newsCount].urlToImage}`\r\n      //           img4.alt = `${articles[newsCount].author}`\r\n      //           firstP.textContent = `${articles[newsCount].description}`\r\n      //           img5.src = `${articles[newsCount].urlToImage}`\r\n      //           img5.alt = `${articles[newsCount].author}`\r\n      //           h25.textContent = `${articles[newsCount].title}`\r\n      //       } else {\r\n      //           clearInterval(newsCountInterval)\r\n      //       }\r\n\r\n      //   }, 10500);\r\n\r\n      //  let newsCount1Interval = setInterval(() => {\r\n\r\n      //        if (newsCount1 <= articles.length) {\r\n      //           newsCount1 += 1;\r\n      //           img6.src = `${articles[newsCount1].urlToImage}`\r\n      //           img6.alt = `${articles[newsCount1].author}`\r\n      //           h26.textContent = `${articles[newsCount1].title}`\r\n      //       } else {\r\n      //         clearInterval(newsCount1Interval)\r\n      //       }\r\n\r\n      //   }, 10500);\r\n\r\n      //  let newsCount2Interval = setInterval(() => {\r\n\r\n      //       if (newsCount2 <= articles.length) {\r\n      //           newsCount2 += 1;\r\n      //           img7.src = `${articles[newsCount2].urlToImage}`\r\n      //           img7.alt = `${articles[newsCount2].author}`\r\n      //           h27.textContent = `${articles[newsCount2].title}`\r\n      //       } else {\r\n      //         clearInterval(newsCount2Interval)\r\n      //       }\r\n\r\n      //   }, 10500);\r\n\r\n      //  let newsCount3Interval = setInterval(() => {\r\n            \r\n      //       if (newsCount3 <= articles.length) {\r\n      //           newsCount3 += 1;\r\n      //           img8.src = `${articles[newsCount3].urlToImage}`\r\n      //           img8.alt = `${articles[newsCount3].author}`\r\n      //           h28.textContent = `${articles[newsCount3].title}`\r\n      //       } else {\r\n      //         clearInterval(newsCount3Interval)\r\n      //       }\r\n\r\n      //   }, 10500);\r\n      //       console.log(newsCount);\r\n\r\n      // }\r\n\r\n      // loadMovies()\r\n\r\n\r\n      async function fetchData2(url) {\r\n        try {\r\n          // Before fetching, set loading state\r\n          console.log('Loading...');\r\n          \r\n          const response = await fetch(url);\r\n      \r\n          // Check if response is successful (status 200)\r\n          if (!response.ok) {\r\n            // If response is not successful, throw an error\r\n            throw new Error('Network response was not ok');\r\n          }\r\n      \r\n          // Parse response as JSON\r\n          const data = await response.json();\r\n      \r\n          // After successful fetching, log data\r\n          console.log('Data fetched:', data);\r\n          \r\n          // Return the fetched data\r\n          return data;\r\n        } catch (error) {\r\n          // If any error occurs during fetching, log the error\r\n          console.error('Fetch error:', error.message);\r\n          \r\n          // Return null or any other appropriate value to indicate error state\r\n          return null;\r\n        } finally {\r\n          // Finally block will always execute, regardless of success or failure\r\n          console.log('Fetch completed.');\r\n        }\r\n      }\r\n      \r\n      // Example usage\r\n      const apiUrl2 =  `https://newsapi.org/v2/top-headlines?country=us&apiKey=${API_KEY}`;\r\n      \r\n      fetchData2(apiUrl2)\r\n        .then(data => {\r\n          if (data !== null) {\r\n            const {status,totalResults,articles} = data\r\n            setInterval(() => {\r\n              newsCount += 1;\r\n            //  let = backgroundImages = `${articles[newsCount].urlToImage}`;\r\n            //  bgImage.style.backgroundImage = backgroundImages;\r\n              img9.src = `${articles[newsCount].urlToImage}`;\r\n              img9.alt = `${articles[newsCount].title}`;\r\n              thirdP.textContent = `${articles[newsCount].description}`;\r\n          },  10000);\r\n          } else {\r\n            // Handle error state\r\n          }\r\n        });\r\n\r\n        async function fetchData3(url) {\r\n          try {\r\n            // Before fetching, set loading state\r\n            console.log('Loading...');\r\n            \r\n            const response = await fetch(url);\r\n        \r\n            // Check if response is successful (status 200)\r\n            if (!response.ok) {\r\n              // If response is not successful, throw an error\r\n              throw new Error('Network response was not ok');\r\n            }\r\n        \r\n            // Parse response as JSON\r\n            const data = await response.json();\r\n        \r\n            // After successful fetching, log data\r\n            console.log('Data fetched:', data);\r\n            homeMain.style.display = \"block\"\r\n            // Return the fetched data\r\n            return data;\r\n          } catch (error) {\r\n            // If any error occurs during fetching, log the error\r\n            console.error('Fetch error:', error.message);\r\n            \r\n            // Return null or any other appropriate value to indicate error state\r\n            return null;\r\n          } finally {\r\n            // Finally block will always execute, regardless of success or failure\r\n            console.log('Fetch completed.');\r\n          }\r\n        }\r\n\r\n        const apiUrl3 =  `https://newsapi.org/v2/top-headlines/sources?apiKey=${API_KEY}`;\r\n\r\n        fetchData3(apiUrl3)\r\n        .then(data => {\r\n          if (data !== null) {\r\n            const {status,sources} = data;\r\n            footerP1.textContent = `${sources[0].name}`\r\n            footerP2.textContent = `${sources[1].name}`\r\n            footerP3.textContent = `${sources[2].name}`\r\n            footerP4.textContent = `${sources[3].name}`\r\n            footerP5.textContent = `${sources[6].name}`\r\n            footerP6.textContent = `${sources[7].name}`\r\n\r\n          } else {\r\n\r\n          }\r\n        });\r\n});\r\n\r\n// swiper function\r\nconst swiper = new Swiper('.swiper', {\r\n    // Optional parameters\r\n    direction: 'horizontal',\r\n    loop: true,\r\n  \r\n    // If we need pagination\r\n    pagination: {\r\n      el: '.swiper-pagination',\r\n    },\r\n  \r\n    // Navigation arrows\r\n    navigation: {\r\n      nextEl: '.swiper-button-next',\r\n      prevEl: '.swiper-button-prev',\r\n    },\r\n  \r\n    // And if we need scrollbar\r\n    scrollbar: {\r\n      el: '.swiper-scrollbar',\r\n    },\r\n  });\r\n\r\n\r\n\r\n\r\n\r\nconst openNav = () => {\r\n    navBar.style.display = \"block\"\r\n    navOpen.style.display = \"none\"\r\n    navClose.style.display = \"block\";\r\n}\r\n\r\nconst closeNav = () => {\r\n    navBar.style.display = \"none\"\r\n    navOpen.style.display = \"block\"\r\n    navClose.style.display = \"none\";\r\n}\r\n\r\nnavOpen.addEventListener(\"click\",openNav);\r\nnavClose.addEventListener(\"click\",closeNav);\r\nnavBar.addEventListener(\"click\",function () {\r\n    navBar.style.display = \"none\"\r\n    // 6065a270b19a4c6c8b3bc836f66a7a67\r\n})\r\n\r\n\n\n//# sourceURL=webpack://test-for-js/./src/quiz.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/quiz.js"]();
/******/ 	
/******/ })()
;